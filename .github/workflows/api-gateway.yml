name: API Gateway CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/api-gateway/**'
      - '.github/workflows/api-gateway.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/api-gateway/**'

jobs:
  lint-and-test:
    name: Lint & Test API Gateway
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/api-gateway/requirements.txt

      - name: Install dependencies
        working-directory: apps/api-gateway
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff pytest pytest-cov pytest-asyncio httpx

      - name: Lint with Ruff
        working-directory: apps/api-gateway
        run: |
          ruff check . --output-format=github
        continue-on-error: true

      - name: Format check with Ruff
        working-directory: apps/api-gateway
        run: |
          ruff format --check .
        continue-on-error: true

      - name: Type check with mypy
        working-directory: apps/api-gateway
        run: |
          pip install mypy types-requests
          mypy main.py --ignore-missing-imports
        continue-on-error: true

      - name: Run tests
        working-directory: apps/api-gateway
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: apps/api-gateway/coverage.xml
          flags: api-gateway
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: apps/api-gateway
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run Safety check
        working-directory: apps/api-gateway
        run: |
          safety check --json
        continue-on-error: true

      - name: Run Bandit security linter
        working-directory: apps/api-gateway
        run: |
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true
